<Type Name="DefaultHttpHandler" FullName="System.Web.DefaultHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc7d752bf19d6536bba9d1d2c183c129c177b5cb" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37586151" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DefaultHttpHandler : System.Web.IHttpAsyncHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultHttpHandler extends System.Object implements class System.Web.IHttpAsyncHandler, class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.DefaultHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultHttpHandler&#xA;Implements IHttpAsyncHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultHttpHandler : System::Web::IHttpAsyncHandler" />
  <TypeSignature Language="F#" Value="type DefaultHttpHandler = class&#xA;    interface IHttpAsyncHandler&#xA;    interface IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje właściwości i metody domyślny program obsługi HTTP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Element <xref:System.Web.DefaultHttpHandler> obiektu przechwytuje przychodzące żądania w potoku HTTP, po przejęciu żądania został skonfigurowany za pośrednictwem Internet usług informacyjnych (IIS) 6.0 i nie jawnego powiązania dotyczą żądane rozszerzenie.  
  
 Żądanie zatrzymania można skonfigurować za pomocą funkcji mapowania aplikacji z symbolami wieloznacznymi wprowadzone w usługach IIS 6.0. Aby uzyskać więcej informacji, wyszukaj [biblioteki MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118) informacji o używaniu mapowania aplikacji symboli wieloznacznych, aby ponownie zamapować adresu URL.  
  
 <xref:System.Web.DefaultHttpHandler> Klasy implementuje <xref:System.Web.IHttpAsyncHandler> interfejsu, aby zapewnić asynchronicznego przetwarzania żądania. Aby uzyskać ogólne informacje dotyczące programów obsługi HTTP, zobacz [programów obsługi HTTP i przegląd moduły HTTP](http://msdn.microsoft.com/library/f540bdeb-d22e-4e1d-ba8a-fe6c9926283b). Ponadto aby uzyskać więcej informacji zobacz następujące tematy:  
  
-   Informacji na temat tworzenia asynchronicznych funkcje obsługi protokołu HTTP, zobacz [wskazówki: tworzenie programu obsługi HTTP na asynchroniczne](http://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9).  
  
-   Rejestrowanie programów obsługi HTTP, informacje, zobacz [porady: rejestrowanie programów obsługi HTTP](http://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60).  
  
 Klasy mogą dziedziczyć <xref:System.Web.DefaultHttpHandler> klasy, aby zapewnić obsługę niestandardowych żądań. Asynchroniczne programu obsługi HTTP, która jest pochodną <xref:System.Web.DefaultHttpHandler> można zastąpić <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> metodę, aby zmienić sposób przetwarzania żądań.  
  
 Element <xref:System.Web.DefaultHttpHandler> nie używa błędy programu ASP.NET. Istniejącej zawartości, który używa błędów usług IIS lub mechanizm moralnych ISAPI błędu niestandardowego, będzie działać bez zmian.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób implementacji dostosowanego programu obsługi HTTP, wynikające z <xref:System.Web.DefaultHttpHandler> klasy.  
  
 [!code-csharp[System.Web.DefaultHttpHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/CS/source.cs#1)]
 [!code-vb[System.Web.DefaultHttpHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHttpHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultHttpHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.DefaultHttpHandler" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginProcessRequest (context As HttpContext, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult" Usage="defaultHttpHandler.BeginProcessRequest (context, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Obiekt, który zawiera odwołania do wewnętrznych serwera obiektów, które są używane do obsługi żądań HTTP.</param>
        <param name="callback">Metoda do wywołania po ukończeniu asynchronicznego wywołania metody. Jeśli <c>wywołania zwrotnego</c> jest <see langword="null" />, delegat nie jest wywoływana.</param>
        <param name="state">Dowolne dane stanu, które są potrzebne do przetwarzania żądania.</param>
        <summary>Inicjuje asynchroniczne połączenie z programem obsługi HTTP.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Zawierający informacje o stanie procesu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas tworzenia programu obsługi HTTP do użycia asynchronicznego, programu obsługi musi implementować asynchroniczne <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> i <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> metod, które są wywoływane asynchronicznie przez platformę ASP.NET.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Warunki wstępne przetwarzanie Niepowodzenie żądania i żądany plik ma .asp sufiks lub żądanie zostało wysłane za pośrednictwem wpisu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.Context" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Web.HttpContext" Usage="System.Web.DefaultHttpHandler.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kontekst, który jest skojarzony z bieżącym <see cref="T:System.Web.DefaultHttpHandler" /> obiektu.</summary>
        <value>
          <see cref="T:System.Web.HttpContext" /> Obiekt, który zawiera bieżącego kontekstu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.Context%2A> Właściwości zapewnia dostęp do bieżącego <xref:System.Web.HttpContext> obiektu dla klas pochodnych. <xref:System.Web.HttpContext> Obiekt umożliwia dostęp do wewnętrznych <xref:System.Web.HttpApplication.Request%2A>, <xref:System.Web.HttpApplication.Response%2A>, i <xref:System.Web.HttpApplication.Server%2A> właściwości dla żądania. Aby uzyskać więcej informacji na temat uzyskiwania dostępu do informacji kontekstowych, zobacz <xref:System.Web.HttpContext>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="EndProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndProcessRequest (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndProcessRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndProcessRequest : IAsyncResult -&gt; unit&#xA;override this.EndProcessRequest : IAsyncResult -&gt; unit" Usage="defaultHttpHandler.EndProcessRequest result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Obiekt, który zawiera informacje o stanie procesu.</param>
        <summary>Udostępnia metodę end procesu asynchronicznego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> metodę, aby zgłaszać wyjątków, które są przechwytywane podczas procesu asynchronicznego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteUrlHeaders">
      <MemberSignature Language="C#" Value="protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ExecuteUrlHeaders As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Specialized::NameValueCollection ^ ExecuteUrlHeaders { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteUrlHeaders : System.Collections.Specialized.NameValueCollection" Usage="System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję nagłówków żądania i wartości żądania do transferu wraz z żądaniem.</summary>
        <value>Element <see cref="T:System.Collections.Specialized.NameValueCollection" /> zawierający nagłówki żądania i wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.ExecuteUrlHeaders%2A> Właściwość zwraca pustą kolekcję, o ile nie zostanie wprowadzony w klasie, która jest pochodną <xref:System.Web.DefaultHttpHandler> klasy. Nagłówki, które są dodawane są dołączane do kolekcji nagłówków w żądaniu przed przekazaniem żądania z powrotem do Internet Information Services (IIS).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.DefaultHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.IHttpHandler.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość logiczną wskazującą, czy inne żądanie może użyć bieżącego wystąpienia <see cref="T:System.Web.DefaultHttpHandler" /> klasy.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Web.DefaultHttpHandler" /> jest wielokrotnego użytku; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby jawnie ustawić <xref:System.Web.DefaultHttpHandler.IsReusable%2A> właściwości `true` lub `false`, Zastąp <xref:System.Web.DefaultHttpHandler.IsReusable%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnExecuteUrlPreconditionFailure">
      <MemberSignature Language="C#" Value="public virtual void OnExecuteUrlPreconditionFailure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExecuteUrlPreconditionFailure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnExecuteUrlPreconditionFailure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnExecuteUrlPreconditionFailure();" />
      <MemberSignature Language="F#" Value="abstract member OnExecuteUrlPreconditionFailure : unit -&gt; unit&#xA;override this.OnExecuteUrlPreconditionFailure : unit -&gt; unit" Usage="defaultHttpHandler.OnExecuteUrlPreconditionFailure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wywołuje się, gdy warunki wstępne zapobiec <see cref="T:System.Web.DefaultHttpHandler" /> obiekt z przetwarzania żądania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Warunki wstępne są określone przez klienta w pola nagłówka żądania, które są oceniane na serwerze sieci Web. Na przykład za pomocą warunków wstępnych, klientów można zapobiec żądanej metody (na przykład GET) stosowane do zasobu innego niż wymagany. Aby uzyskać więcej informacji, zobacz sekcję 14, "Definicje pól nagłówka" w [Hypertext Transfer Protocol — HTTP/1.1](http://go.microsoft.com/fwlink/?LinkID=73147) specyfikację w witrynie sieci Web konsorcjum World Wide Web Consortium (W3C).  
  
 <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> Metoda jest wywoływana, gdy warunki wstępne zapobiec <xref:System.Web.DefaultHttpHandler> obiekt z przetwarzania żądania. Klasa pochodna może przesłonić <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> metodę, aby zgłosić wyjątek, gdy warunki wstępne się nie powieść. <xref:System.Web.DefaultHttpHandler> Nie zgłasza wyjątku <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> metody.  
  
 Spowoduje następujące warunki wstępne nie powiedzie się:  
  
-   Wywoływanie <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Wywoływanie <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Wywoływanie <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Zmiana zasad pamięci podręcznej dla odpowiedzi.  
  
-   Dodawanie <xref:System.IO.Stream> obiektu jako filtr, aby <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideExecuteUrlPath">
      <MemberSignature Language="C#" Value="public virtual string OverrideExecuteUrlPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string OverrideExecuteUrlPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OverrideExecuteUrlPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ OverrideExecuteUrlPath();" />
      <MemberSignature Language="F#" Value="abstract member OverrideExecuteUrlPath : unit -&gt; string&#xA;override this.OverrideExecuteUrlPath : unit -&gt; string" Usage="defaultHttpHandler.OverrideExecuteUrlPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zastępuje docelowy adres URL dla bieżącego żądania.</summary>
        <returns>Zastąpione adres URL do użycia w żądaniu; lub <see langword="null" /> Jeśli nie podano adresu URL zastąpione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> Metoda zwraca `null` , chyba że zostanie zastąpiona w klasie, która jest pochodną <xref:System.Web.DefaultHttpHandler> klasy.  
  
 <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> Metoda jest wywoływana tylko ASP.NET działa w trybie izolacji procesu roboczego w usługach IIS 6.0, a odpowiedź nie był modyfikowany przed <xref:System.Web.DefaultHttpHandler> obiektu została wywołana. Odpowiedź jest modyfikowany przez dowolny z następujących czynności:  
  
-   Wywoływanie <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Wywoływanie <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Wywoływanie <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Zmiana zasad pamięci podręcznej dla odpowiedzi.  
  
-   Dodawanie <xref:System.IO.Stream> obiektu jako filtr, aby <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit&#xA;override this.ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="defaultHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Obiekt, który zawiera odwołania do wewnętrznych obiektów serwera używane do obsługi żądań HTTP.</param>
        <summary>Włącza <see cref="T:System.Web.DefaultHttpHandler" /> obiekt do przetwarzania żądań HTTP w sieci Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> Metoda nie powinna być wywoływana synchronicznie. Klasy, które są uzyskiwane z <xref:System.Web.DefaultHttpHandler> zastępować <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> zapewnienie przetwarzania żądań niestandardowych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" /> Jest wywoływana synchronicznie.</exception>
        <altmember cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
  </Members>
</Type>