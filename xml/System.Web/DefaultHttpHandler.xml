<Type Name="DefaultHttpHandler" FullName="System.Web.DefaultHttpHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ab0a3879d8998d81018620266d617c4acd9861e3" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69228315" /></Metadata><TypeSignature Language="C#" Value="public class DefaultHttpHandler : System.Web.IHttpAsyncHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultHttpHandler extends System.Object implements class System.Web.IHttpAsyncHandler, class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.DefaultHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultHttpHandler&#xA;Implements IHttpAsyncHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultHttpHandler : System::Web::IHttpAsyncHandler" />
  <TypeSignature Language="F#" Value="type DefaultHttpHandler = class&#xA;    interface IHttpAsyncHandler&#xA;    interface IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.IHttpHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje właściwości i metody domyślnego programu obsługi protokołu HTTP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler> Obiekt przechwytuje przychodzące żądania w potoku HTTP, gdy zarówno przechwycenie żądania zostało skonfigurowane za pośrednictwem Internet Information Services (IIS) 6,0, a żadne jawne powiązania nie mają zastosowania do żądanego rozszerzenia.  
  
 Przechwycenie żądania można skonfigurować za pomocą funkcji mapowania aplikacji symboli wieloznacznych wprowadzonych w usługach IIS 6,0. Aby uzyskać więcej informacji, zapoznaj się z [biblioteką MSDN](https://go.microsoft.com/fwlink/?linkid=37118) w celu uzyskania informacji dotyczących używania symboli wieloznacznych aplikacji w celu ponownego mapowania adresu URL.  
  
 <xref:System.Web.DefaultHttpHandler> Klasa<xref:System.Web.IHttpAsyncHandler> implementuje interfejs, aby zapewnić asynchroniczne przetwarzanie żądań. Aby uzyskać ogólne informacje na temat obsługi protokołu HTTP, zobacz [programy obsługi HTTP i moduły HTTP — Omówienie](https://msdn.microsoft.com/library/f540bdeb-d22e-4e1d-ba8a-fe6c9926283b). Ponadto aby uzyskać więcej informacji, zobacz następujące tematy:  
  
-   Informacje o tworzeniu asynchronicznych programów obsługi http [, zobacz Przewodnik: Tworzenie asynchronicznej obsługi](https://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9)protokołu HTTP.  
  
-   Informacje o rejestrowaniu obsługi protokołu HTTP [— zobacz How to: Zarejestruj procedury obsługi](https://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60)protokołu HTTP.  
  
 Klasy mogą pochodzić od <xref:System.Web.DefaultHttpHandler> klasy w celu zapewnienia dostosowanej obsługi żądań. Asynchroniczna procedura obsługi HTTP, która jest pochodną z <xref:System.Web.DefaultHttpHandler> może <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> przesłonić metodę, aby zmienić sposób przetwarzania żądań.  
  
 <xref:System.Web.DefaultHttpHandler> Nie używa błędów ASP.NET. Istniejąca zawartość, która używa błędów usług IIS lub niestandardowego mechanizmu błędów interfejsu ISAPI propriety, będzie działała bez zmian.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób implementacji dostosowanej obsługi protokołu HTTP przez wyprowadzanie z <xref:System.Web.DefaultHttpHandler> klasy.  
  
 [!code-csharp[System.Web.DefaultHttpHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/CS/source.cs#1)]
 [!code-vb[System.Web.DefaultHttpHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60">Instrukcje: Zarejestruj procedury obsługi HTTP</related>
    <related type="Article" href="https://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9">Instrukcje: Tworzenie asynchronicznej procedury obsługi HTTP</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHttpHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultHttpHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.DefaultHttpHandler" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginProcessRequest (context As HttpContext, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult" Usage="defaultHttpHandler.BeginProcessRequest (context, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Obiekt, który zawiera odwołania do wewnętrznych obiektów serwera, które są używane do obsługi żądań HTTP.</param>
        <param name="callback">Metoda wywoływana, gdy asynchroniczne wywołanie metody zostało zakończone. Jeśli <paramref name="callback" /> jest<see langword="null" />, delegat nie jest wywoływany.</param>
        <param name="state">Wszystkie dane stanu, które są potrzebne do przetworzenia żądania.</param>
        <summary>Inicjuje asynchroniczne wywołanie procedury obsługi protokołu HTTP.</summary>
        <returns><see cref="T:System.IAsyncResult" /> Zawiera informacje o stanie procesu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas tworzenia obsługi protokołu HTTP do użytku asynchronicznego, procedura obsługi musi implementować asynchroniczne <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> i <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> metody, które są wywoływane asynchronicznie przez ASP.NET.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Warunki wstępne przetwarzania żądania nie powiodły się i żądany plik ma sufiks. ASP lub żądanie zostało wysłane za pomocą wpisu POST.</exception>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.Context" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Web.HttpContext" Usage="System.Web.DefaultHttpHandler.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kontekst, który jest skojarzony z bieżącym <see cref="T:System.Web.DefaultHttpHandler" /> obiektem.</summary>
        <value><see cref="T:System.Web.HttpContext" /> Obiekt, który zawiera bieżący kontekst.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość zapewnia dostęp do bieżącego <xref:System.Web.HttpContext> obiektu dla klas pochodnych. <xref:System.Web.DefaultHttpHandler.Context%2A> Obiekt zapewnia dostęp do wewnętrznych <xref:System.Web.HttpApplication.Request%2A>, <xref:System.Web.HttpApplication.Response%2A>i <xref:System.Web.HttpApplication.Server%2A> właściwości żądania. <xref:System.Web.HttpContext> Aby uzyskać więcej informacji na temat uzyskiwania dostępu do <xref:System.Web.HttpContext>informacji kontekstowych, zobacz.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="EndProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndProcessRequest (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndProcessRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndProcessRequest : IAsyncResult -&gt; unit&#xA;override this.EndProcessRequest : IAsyncResult -&gt; unit" Usage="defaultHttpHandler.EndProcessRequest result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Obiekt, który zawiera informacje o stanie procesu.</param>
        <summary>Zapewnia metodę końcową dla procesu asynchronicznego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> metody, aby zgłosić wyjątki, które są przechwytywane podczas procesu asynchronicznego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteUrlHeaders">
      <MemberSignature Language="C#" Value="protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ExecuteUrlHeaders As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Specialized::NameValueCollection ^ ExecuteUrlHeaders { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteUrlHeaders : System.Collections.Specialized.NameValueCollection" Usage="System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję nagłówków żądań i wartości żądań do przesłania wraz z żądaniem.</summary>
        <value><see cref="T:System.Collections.Specialized.NameValueCollection" /> Zawierający nagłówki i wartości żądania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość zwraca pustą kolekcję, chyba że jest wypełniona w klasie, która jest pochodną <xref:System.Web.DefaultHttpHandler> klasy. <xref:System.Web.DefaultHttpHandler.ExecuteUrlHeaders%2A> Dodane nagłówki są dołączane do kolekcji nagłówków w żądaniu przed przekazaniem żądania z powrotem do Internet Information Services (IIS).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.DefaultHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.IHttpHandler.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość logiczną wskazującą, że inne żądanie może korzystać z bieżącego wystąpienia <see cref="T:System.Web.DefaultHttpHandler" /> klasy.</summary>
        <value><see langword="true" />Jeśli jest wielokrotnego użytku, <see langword="false" />w przeciwnym razie. <see cref="T:System.Web.DefaultHttpHandler" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby jawnie ustawić <xref:System.Web.DefaultHttpHandler.IsReusable%2A> właściwość na `true` lub `false`, Zastąp <xref:System.Web.DefaultHttpHandler.IsReusable%2A> właściwość.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnExecuteUrlPreconditionFailure">
      <MemberSignature Language="C#" Value="public virtual void OnExecuteUrlPreconditionFailure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExecuteUrlPreconditionFailure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnExecuteUrlPreconditionFailure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnExecuteUrlPreconditionFailure();" />
      <MemberSignature Language="F#" Value="abstract member OnExecuteUrlPreconditionFailure : unit -&gt; unit&#xA;override this.OnExecuteUrlPreconditionFailure : unit -&gt; unit" Usage="defaultHttpHandler.OnExecuteUrlPreconditionFailure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wywołuje się, gdy warunki wstępne <see cref="T:System.Web.DefaultHttpHandler" /> uniemożliwiają obiektowi przetwarzanie żądania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Warunki wstępne są określane przez klienta w polach nagłówka żądania i są oceniane na serwerze sieci Web. Na przykład korzystając z warunków wstępnych, klienci mogą uniemożliwiać stosowanie żądanych metod (na przykład uzyskać) do zasobu innego niż przewidziany. Aby uzyskać więcej informacji, zobacz sekcję 14 "definicje pól nagłówków" w specyfikacji [protokołu HTTP/1.1](https://go.microsoft.com/fwlink/?LinkID=73147) w witrynie sieci Web organizacja World Wide Web Consortium (W3C).  
  
 Metoda jest wywoływana, gdy warunki wstępne <xref:System.Web.DefaultHttpHandler> uniemożliwiają przetwarzanie żądania przez obiekt. <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> Klasa pochodna może zastąpić metodę, <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> aby zgłosić wyjątek w przypadku niepowodzenia warunków wstępnych. Nie zgłasza wyjątku <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> w metodzie. <xref:System.Web.DefaultHttpHandler>  
  
 Dowolne z poniższych elementów spowoduje niepowodzenie warunków wstępnych:  
  
-   Wywoływanie <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Wywoływanie <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Wywoływanie <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Zmiana zasad pamięci podręcznej dla odpowiedzi.  
  
-   Dodawanie obiektu jako filtru <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> do właściwości. <xref:System.IO.Stream>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideExecuteUrlPath">
      <MemberSignature Language="C#" Value="public virtual string OverrideExecuteUrlPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string OverrideExecuteUrlPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OverrideExecuteUrlPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ OverrideExecuteUrlPath();" />
      <MemberSignature Language="F#" Value="abstract member OverrideExecuteUrlPath : unit -&gt; string&#xA;override this.OverrideExecuteUrlPath : unit -&gt; string" Usage="defaultHttpHandler.OverrideExecuteUrlPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zastępuje docelowy adres URL dla bieżącego żądania.</summary>
        <returns>Zastąpiony adres URL do użycia w żądaniu; lub <see langword="null" /> Jeśli nie podano przesłanianego adresu URL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda zwraca wartość `null` , chyba że zostanie zastąpiona w klasie <xref:System.Web.DefaultHttpHandler> , która jest pochodną klasy. <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A>  
  
 Metoda jest wywoływana tylko wtedy, gdy ASP.NET jest uruchomiona w trybie izolacji procesu roboczego w usługach IIS 6,0 i jeśli odpowiedź nie została zmodyfikowana <xref:System.Web.DefaultHttpHandler> przed wywołaniem obiektu. <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> Odpowiedź jest modyfikowana przez jedną z następujących czynności:  
  
-   Wywoływanie <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Wywoływanie <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Wywoływanie <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Zmiana zasad pamięci podręcznej dla odpowiedzi.  
  
-   Dodawanie obiektu jako filtru <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> do właściwości. <xref:System.IO.Stream>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit&#xA;override this.ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="defaultHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Obiekt, który zawiera odwołania do wewnętrznych obiektów serwera używanych do obsługi żądań HTTP.</param>
        <summary><see cref="T:System.Web.DefaultHttpHandler" /> Umożliwia obiektowi przetworzenie żądań sieci Web http.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> Metoda nie powinna być wywoływana synchronicznie. Klasy, które są wyprowadzane <xref:System.Web.DefaultHttpHandler> z klasy, mogą <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> przesłonić w celu zapewnienia niestandardowego przetwarzania żądań.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" /> Jest wywoływana synchronicznie.</exception>
        <altmember cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
  </Members>
</Type>
