<Type Name="TraceContext" FullName="System.Web.TraceContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="49e552faa4d809c8ea6e2c3a93773f749884c97b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30694442" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TraceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TraceContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.TraceContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TraceContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class TraceContext sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Przechwytuje i przedstawia wykonywania szczegóły żądania sieci Web. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa służy do dołączenia do śledzenia określonych kategorii wiadomości. Na przykład w przypadku tworzenia wystąpienia <xref:System.Web.UI.WebControls.Calendar> klasy dla aplikacji, może obejmować komunikat śledzenia "Uruchamianie do renderowania" w procedurze renderowania i "Wywoływanie zdarzeń OnChange" w procedurze obsługi zdarzeń.  
  
 Można również użyć <xref:System.Web.TraceContext> klasy można uzyskać zestawu rekordów śledzenia po zakończeniu wykonywania żądania przetwarzania niestandardowego. Aby uzyskać więcej informacji, zobacz [omówienie śledzenia ASP.NET](http://msdn.microsoft.com/library/1552561d-887c-4002-8770-f92662cdf416).  
  
 Aby włączyć śledzenie, ustaw `Trace` atrybutu w [@ Page](http://msdn.microsoft.com/library/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) dyrektywy lub <xref:System.Web.TraceContext.IsEnabled%2A> właściwości `true`. Gdy śledzenie jest włączone, oprócz wyświetlania zawartości śledzenia dostarczane przez użytkownika <xref:System.Web.UI.Page> klasy automatycznie obejmuje dane dotyczące wydajności, informacje o strukturze drzewa formantów i stanu zarządzania zawartości dla każdego żądania.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.TraceContextEventArgs" />
    <altmember cref="T:System.Web.TraceContextEventHandler" />
    <altmember cref="T:System.Web.TraceContextRecord" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TraceContext (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.#ctor(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TraceContext(System::Web::HttpContext ^ context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> Zawierający informacje dotyczące bieżącego żądania sieci Web.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.TraceContext" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.TraceContext.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy śledzenie jest włączone dla bieżącego żądania sieci Web.</summary>
        <value>
          <see langword="true" /> Jeśli śledzenie jest włączone; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej flagi, aby sprawdzić, czy stronę lub aplikacja powinna danych wyjściowych informacji śledzenia przed niczego zapisuje w dzienniku śledzenia.  
  
 Wartość <xref:System.Web.TraceContext.IsEnabled%2A> właściwość zależy od ustawienia w sekcji `system.web` sekcji konfiguracji i wartość `trace` atrybutu dyrektywy. Opcja śledzenia w dyrektywie page mają pierwszeństwo przed tę opcję i w pliku konfiguracji. Ustawienie <xref:System.Web.TraceContext.IsEnabled%2A> wartość programowo ma pierwszeństwo przed zarówno atrybutu dyrektywy strony i ustawienia konfiguracji.  
  
> [!NOTE]
>  Jeśli ustawisz <xref:System.Web.TraceContext.IsEnabled%2A> właściwości `true` dla całej aplikacji, musisz jawnie ustawić tę właściwość `false` dla dowolnej strony w aplikacji, dla których nie chcesz wyświetlane informacje śledzenia.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano, jak ustalić, czy śledzenie jest włączone dla strony. Kod iterację wierszy w zestawie danych, pisanie instrukcji śledzenia dla każdego wiersza w tym zestawie danych.  
  
 [!code-csharp[Classic TraceContext.IsEnabled Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic TraceContext.IsEnabled Example/CS/source.cs#1)]
 [!code-vb[Classic TraceContext.IsEnabled Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic TraceContext.IsEnabled Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceFinished">
      <MemberSignature Language="C#" Value="public event System.Web.TraceContextEventHandler TraceFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.TraceContextEventHandler TraceFinished" />
      <MemberSignature Language="DocId" Value="E:System.Web.TraceContext.TraceFinished" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TraceFinished As TraceContextEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::TraceContextEventHandler ^ TraceFinished;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.TraceContextEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zgłoszone przez <see cref="T:System.Web.TraceContext" /> obiektu do udostępnienia śledzenia komunikatów, po zebraniu wszystkich informacji żądania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.TraceContext.TraceFinished> Zdarzenie jest wywoływane podczas `EndRequest` etap procesu przetwarzania żądania HTTP. Zostanie wywołane przez <xref:System.Web.TraceContext> obiektu po zebraniu wszystkich informacji żądania do udostępnienia kolekcję <xref:System.Web.TraceContextRecord> komunikaty zarejestrowane <xref:System.Web.TraceContextEventHandler> delegatów.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano, jak można zarejestrować <xref:System.Web.TraceContextEventHandler> do obsługi <xref:System.Web.TraceContext.TraceFinished> zdarzeń. W tym przykładzie delegat iteruje komunikaty śledzenia i zapisuje je w strumieniu odpowiedzi; jednak można zapisać tych samych informacji do bazy danych lub profilowania odbiorcy narzędzia.  
  
 [!code-aspx-csharp[System.Web.Trace_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_3/CS/form3cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_3/VB/form3vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.TraceContextEventHandler" />
        <altmember cref="T:System.Web.TraceContextEventArgs" />
        <altmember cref="T:System.Web.TraceContextRecord" />
      </Docs>
    </Member>
    <Member MemberName="TraceMode">
      <MemberSignature Language="C#" Value="public System.Web.TraceMode TraceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.TraceMode TraceMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.TraceContext.TraceMode" />
      <MemberSignature Language="VB.NET" Value="Public Property TraceMode As TraceMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::TraceMode TraceMode { System::Web::TraceMode get(); void set(System::Web::TraceMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.TraceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia posortowane, w którym komunikaty śledzenia powinny być danymi wyjściowymi przeglądarki.</summary>
        <value>Jeden z <see cref="T:System.Web.TraceMode" /> wartości wyliczenia. Wartość domyślna to ustawienie, określony przez <see langword="traceMode" /> atrybutu w <see langword="trace" /> sekcji pliku konfiguracji, w której domyślna to <see langword="SortByTime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Komunikaty śledzenia mogą być sortowane w kolejności, które zostały one przetworzone lub alfabetycznie według kategorii zdefiniowanej przez użytkownika.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano, jak można sortować strony instrukcji śledzenia alfabetycznie według kategorii, które zostały przypisane do oświadczeń.  
  
 [!code-aspx-csharp[Classic TraceContext.TraceMode Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic TraceContext.TraceMode Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic TraceContext.TraceMode Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic TraceContext.TraceMode Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wybrana wartość nie jest jednym z <see cref="T:System.Web.TraceMode" /> wartości wyliczenia.</exception>
        <altmember cref="T:System.Web.UI.Page" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Warn">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Informacje śledzenia zapisów w dzienniku śledzenia. W odróżnieniu od <see cref="M:System.Web.TraceContext.Write(System.String)" />, wszystkie ostrzeżenia pojawiają się w dzienniku jako czerwony.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Warn">
      <MemberSignature Language="C#" Value="public void Warn (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Warn(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Warn(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Warn (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Warn(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat śledzenia do zapisania w dzienniku.</param>
        <summary>Zapisuje komunikat śledzenia w dzienniku śledzenia. Wszystkie ostrzeżenia są wyświetlane w dzienniku jako czerwony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za każdym razem, gdy <xref:System.Web.TraceContext.Warn%2A> metoda jest wywoływana, <xref:System.Web.TraceContext> komunikat śledzenia jest dodawany do <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> kolekcji, która jest dostępna w przypadku obsługi komunikatów <xref:System.Web.TraceContext.TraceFinished> zdarzeń. Wiadomość zostanie dodany z jego <xref:System.Web.TraceContextRecord.IsWarning%2A> ustawioną właściwość `true` i jego <xref:System.Web.TraceContextRecord.ErrorInfo%2A> ustawioną właściwość `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Warn">
      <MemberSignature Language="C#" Value="public void Warn (string category, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Warn(string category, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Warn(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Warn (category As String, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Warn(System::String ^ category, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">Kategoria śledzenia, który odbiera wiadomości.</param>
        <param name="message">Komunikat śledzenia do zapisania w dzienniku.</param>
        <summary>Zapisy śledzenia informacji w dzienniku śledzenia, w tym wszystkie kategorie zdefiniowane przez użytkownika oraz śledzenia wiadomości. Wszystkie ostrzeżenia są wyświetlane w dzienniku jako czerwony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za każdym razem, gdy <xref:System.Web.TraceContext.Warn%2A> metoda jest wywoływana, <xref:System.Web.TraceContext> komunikat śledzenia jest dodawany do <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> kolekcji, która jest dostępna w przypadku obsługi komunikatów <xref:System.Web.TraceContext.TraceFinished> zdarzeń. Wiadomość zostanie dodany z jego <xref:System.Web.TraceContextRecord.IsWarning%2A> ustawioną właściwość `true` i jego <xref:System.Web.TraceContextRecord.ErrorInfo%2A> ustawioną właściwość `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Warn">
      <MemberSignature Language="C#" Value="public void Warn (string category, string message, Exception errorInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Warn(string category, string message, class System.Exception errorInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Warn(System.String,System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Warn (category As String, message As String, errorInfo As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Warn(System::String ^ category, System::String ^ message, Exception ^ errorInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="errorInfo" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="category">Kategoria śledzenia, który odbiera wiadomości.</param>
        <param name="message">Komunikat śledzenia do zapisania w dzienniku.</param>
        <param name="errorInfo">
          <see cref="T:System.Exception" /> Zawierający informacje o tym błędzie.</param>
        <summary>Zapisuje śledzenia informacji w dzienniku śledzenia, w tym wszystkie kategorie zdefiniowane przez użytkownika, komunikaty śledzenia i informacje o błędzie. Wszystkie ostrzeżenia są wyświetlane w dzienniku jako czerwony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za każdym razem, gdy <xref:System.Web.TraceContext.Warn%2A> metoda jest wywoływana, <xref:System.Web.TraceContext> komunikat śledzenia jest dodawany do <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> kolekcji, która jest dostępna w przypadku obsługi komunikatów <xref:System.Web.TraceContext.TraceFinished> zdarzeń. Wiadomość zostanie dodany z jego <xref:System.Web.TraceContextRecord.IsWarning%2A> ustawioną właściwość `true`i <xref:System.Web.TraceContextRecord.ErrorInfo%2A> właściwość jest ustawiona na obiekt przekazany `errorInfo` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Web.TraceContext.Write%2A> metodę, aby zapisać komunikat o błędzie śledzenia w dzienniku śledzenia. W tym przykładzie różne wyjątki są śledzone jako błędy i ostrzeżenia. Po stronie zgłasza <xref:System.ArgumentException>, zapisuje komunikat ostrzegawczy przy użyciu <xref:System.Web.TraceContext.Warn%2A> metody. Po stronie zgłasza <xref:System.InvalidOperationException>, zapisuje komunikat błędu przy użyciu <xref:System.Web.TraceContext.Write%2A> metody.  
  
 [!code-aspx-csharp[System.Web.Trace_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_4/CS/form4cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_4/VB/form4vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Informacje śledzenia zapisów w dzienniku śledzenia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat śledzenia do zapisania w dzienniku.</param>
        <summary>Zapisuje komunikat śledzenia w dzienniku śledzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za każdym razem, gdy <xref:System.Web.TraceContext.Write%2A> metoda jest wywoływana, <xref:System.Web.TraceContext> komunikat śledzenia jest dodawany do <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> kolekcji, która jest dostępna w przypadku obsługi komunikatów <xref:System.Web.TraceContext.TraceFinished> zdarzeń. Wiadomość zostanie dodany z jego <xref:System.Web.TraceContextRecord.IsWarning%2A> ustawioną właściwość `false` i jego <xref:System.Web.TraceContextRecord.ErrorInfo%2A> ustawioną właściwość `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string category, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string category, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (category As String, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ category, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">Kategoria śledzenia, który odbiera wiadomości.</param>
        <param name="message">Komunikat śledzenia do zapisania w dzienniku.</param>
        <summary>Informacje śledzenia zapisów w dzienniku śledzenia, w tym wiadomości i kategorie zdefiniowane przez użytkownika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za każdym razem, gdy <xref:System.Web.TraceContext.Write%2A> metoda jest wywoływana, <xref:System.Web.TraceContext> komunikat śledzenia jest dodawany do <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> kolekcji, która jest dostępna w przypadku obsługi komunikatów <xref:System.Web.TraceContext.TraceFinished> zdarzeń. Wiadomość zostanie dodany z jego <xref:System.Web.TraceContextRecord.IsWarning%2A> ustawioną właściwość `false` i jego <xref:System.Web.TraceContextRecord.ErrorInfo%2A> ustawioną właściwość `null`.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Web.TraceContext.Write%2A> metodę, aby zapisać komunikat o błędzie śledzenia w dzienniku śledzenia. W tym przykładzie delegat iteruje komunikaty śledzenia i zapisuje je w postaci tabeli HTML; jednak można napisać te same informacje z bazą danych lub profilowania odbiorców narzędzia.  
  
 [!code-aspx-csharp[System.Web.Trace_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_5/CS/form5cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_5/VB/form5vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string category, string message, Exception errorInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string category, string message, class System.Exception errorInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Write(System.String,System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (category As String, message As String, errorInfo As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ category, System::String ^ message, Exception ^ errorInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="errorInfo" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="category">Kategoria śledzenia, który odbiera wiadomości.</param>
        <param name="message">Komunikat śledzenia do zapisania w dzienniku.</param>
        <param name="errorInfo">
          <see cref="T:System.Exception" /> Zawierający informacje o tym błędzie.</param>
        <summary>Zapisuje śledzenia informacji w dzienniku śledzenia, w tym wszystkie kategorie zdefiniowane przez użytkownika, komunikaty śledzenia i informacje o błędzie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za każdym razem, gdy <xref:System.Web.TraceContext.Write%2A> metoda jest wywoływana, <xref:System.Web.TraceContext> komunikat śledzenia jest dodawany do <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> kolekcji, która jest dostępna w przypadku obsługi komunikatów <xref:System.Web.TraceContext.TraceFinished> zdarzeń. Wiadomość zostanie dodany z jego <xref:System.Web.TraceContextRecord.IsWarning%2A> ustawioną właściwość `false`i <xref:System.Web.TraceContextRecord.ErrorInfo%2A> właściwość jest ustawiona na obiekt przekazany `errorInfo` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Web.TraceContext.Write%2A> metodę, aby zapisać komunikat o błędzie śledzenia w dzienniku śledzenia. W tym przykładzie różne wyjątki są śledzone jako błędy i ostrzeżenia. Po stronie zgłasza <xref:System.ArgumentException>, zapisuje komunikat ostrzegawczy przy użyciu <xref:System.Web.TraceContext.Warn%2A> metody. Po stronie zgłasza <xref:System.InvalidOperationException>, zapisuje komunikat błędu przy użyciu <xref:System.Web.TraceContext.Write%2A> metody.  
  
 [!code-aspx-csharp[System.Web.Trace_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_4/CS/form4cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_4/VB/form4vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>