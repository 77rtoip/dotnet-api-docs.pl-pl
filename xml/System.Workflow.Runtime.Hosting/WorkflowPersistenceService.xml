<Type Name="WorkflowPersistenceService" FullName="System.Workflow.Runtime.Hosting.WorkflowPersistenceService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="26a36d6ca3c407e95c528c3b81560263c0067a80" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69417755" /></Metadata><TypeSignature Language="C#" Value="public abstract class WorkflowPersistenceService : System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowPersistenceService extends System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowPersistenceService&#xA;Inherits WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowPersistenceService abstract : System::Workflow::Runtime::Hosting::WorkflowRuntimeService" />
  <TypeSignature Language="F#" Value="type WorkflowPersistenceService = class&#xA;    inherit WorkflowRuntimeService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Runtime.Hosting.WorkflowRuntimeService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Abstrakcyjna klasa bazowa, z której są wyprowadzane wszystkie usługi trwałości.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Gdy podczas działania przepływu pracy wystąpią określone warunki, aparat środowiska uruchomieniowego przepływu pracy utrzymuje informacje o stanie dotyczące wystąpienia przepływu pracy. Może wystąpić trwałość, na przykład gdy zostanie zakończona niepodzielna transakcja, gdy wystąpienie przepływu pracy stanie się bezczynne, <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> gdy host wywoła wystąpienie przepływu pracy lub gdy wystąpienie przepływu pracy zostanie zakończone lub zakończy się. Gdy semantyka aparatu środowiska uruchomieniowego przepływu pracy wskaże, że ta trwałość powinna wystąpić, aparat środowiska uruchomieniowego przepływu pracy wywołuje metody dostarczone przez usługę trwałości, aby zapisać informacje o stanie dotyczące wystąpienia przepływu pracy. Podobnie, gdy aparat środowiska uruchomieniowego przepływu pracy musi przywrócić wcześniej utrwalone wystąpienie przepływu pracy, wywołuje metody dostarczone przez usługę trwałości w celu załadowania informacji o stanie. Aparat środowiska uruchomieniowego przepływu pracy obsługuje całą semantykę, w której ma być wykonywana trwałość. Usługa trwałości obsługuje rzeczywiste zapisywanie i ładowanie informacji o stanie przepływu pracy do lub z magazynu danych.  
  
 Usługę trwałości można utworzyć, wprowadzając klasę z <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy.  Usługę trwałości można dodać do aparatu środowiska uruchomieniowego przepływu pracy, wywołując <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> lub wprowadzając odpowiedni wpis w pliku konfiguracyjnym aplikacji. <xref:System.Workflow.Runtime.WorkflowRuntime> Powinna zawierać tylko jedną usługę trwałości. Windows Workflow Foundation udostępnia <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> klasę, usługa trwałości out-of-Box, której można użyć jako lub z rozszerzeniem.  
  
 Aparat środowiska uruchomieniowego przepływu pracy ma semantykę do blokowania informacji o stanie przepływu pracy do użycia w środowiskach, w których usługi trwałości działające w różnych procesach mogą mieć dostęp do pojedynczego magazynu danych. Klasa oferuje możliwość obsługi tej funkcji aparatu środowiska uruchomieniowego przepływu pracy przez podanie parametru do <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> , który określa, czy informacje o stanie wystąpienia przepływu pracy powinny być odblokowane w magazynie danych, i <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> Dzięki podania metody <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> do odblokowania poprzednio zablokowanych informacji o stanie przepływu pracy. W usłudze trwałości implementującej blokowanie, wywołanie <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> powinno blokować informacje o stanie dla wystąpienia przepływu pracy.  
  
 Usługa trwałości powinna zgłosić, <xref:System.Workflow.Runtime.Hosting.PersistenceException> Jeśli nie uda się zapisać informacji o stanie w magazynie danych lub załadować informacji o stanie z magazynu danych. Aparat środowiska uruchomieniowego przepływu pracy oczekuje tego zachowania.  
  
 Mechanizm wsadowy jest dostępny dla usług, które korzystają z magazynu trwałego do zapisywania informacji o stanie przepływu pracy. W tych przypadkach ważne jest zachowanie spójności między trwałym magazynem używanym przez usługę trwałości i wewnętrznym stanem aparatu środowiska uruchomieniowego przepływu pracy. Możesz dodać funkcje zdefiniowane przez <xref:System.Workflow.Runtime.IPendingWork> interfejs do usługi, a następnie wziąć udział w przetwarzaniu wsadowym transakcji przepływu pracy udostępnianym <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> przez dodanie zmian do magazynu danych <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>jako elementów roboczych do. Sam magazyn powinien implementować <xref:System.Transactions.IEnlistmentNotification> interfejs, dzięki czemu informacje o przepływie pracy nie są nieprawidłowo utrwalane w przypadku wycofania transakcji. Aby uzyskać więcej informacji, zobacz <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A> lub <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowPersistenceService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowPersistenceService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej inicjuje nowe wystąpienie <see cref="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład ilustruje tworzenie wystąpienia `SqlWorkflowPersistenceService` klasy (pochodzące od `WorkflowPersistenceService`). Ten przykład pochodzi z przykładu zestawu SDK obsługi wyjątków zagnieżdżonych z klasy Program.cs.  Aby uzyskać więcej informacji, zobacz [przykład zagnieżdżonych programów obsługi wyjątków](https://msdn.microsoft.com/library/d1da0209-842b-41c8-9b7c-0cbaa1034265).  
  
 [!code-csharp[WF_Samples#161](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#161)]
 [!code-vb[WF_Samples#161](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static byte[] GetDefaultSerializedForm (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig unsigned int8[] GetDefaultSerializedForm(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::Byte&gt; ^ GetDefaultSerializedForm(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="static member GetDefaultSerializedForm : System.Workflow.ComponentModel.Activity -&gt; byte[]" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">, <see cref="T:System.Workflow.ComponentModel.Activity" /> Którego zażądano serializowanego formularza.</param>
        <summary>Pobiera serializowaną domyślną formę <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
        <returns>Serializowana domyślna forma elementu <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIsBlocked">
      <MemberSignature Language="C#" Value="protected internal static bool GetIsBlocked (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig bool GetIsBlocked(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetIsBlocked (rootActivity As Activity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static bool GetIsBlocked(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetIsBlocked : System.Workflow.ComponentModel.Activity -&gt; bool" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">Działanie główne wystąpienia przepływu pracy.</param>
        <summary>Wskazuje, czy dana aktywność jest zablokowana.</summary>
        <returns><see langword="true" />w przypadku zablokowania danego działania; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuspendOrTerminateInfo">
      <MemberSignature Language="C#" Value="protected internal static string GetSuspendOrTerminateInfo (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig string GetSuspendOrTerminateInfo(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetSuspendOrTerminateInfo (rootActivity As Activity) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::String ^ GetSuspendOrTerminateInfo(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetSuspendOrTerminateInfo : System.Workflow.ComponentModel.Activity -&gt; string" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">Działanie główne wystąpienia przepływu pracy.</param>
        <summary>Pobiera informacje o zakończeniu lub wstrzymaniu danego działania.</summary>
        <returns>A <see cref="T:System.String" /> , który zawiera informacje o zakończeniu lub wstrzymaniu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowStatus">
      <MemberSignature Language="C#" Value="protected internal static System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig valuetype System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetWorkflowStatus (rootActivity As Activity) As WorkflowStatus" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::Workflow::Runtime::WorkflowStatus GetWorkflowStatus(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetWorkflowStatus : System.Workflow.ComponentModel.Activity -&gt; System.Workflow.Runtime.WorkflowStatus" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">Działanie główne wystąpienia przepływu pracy.</param>
        <summary>Pobiera stan przepływu pracy.</summary>
        <returns>Wartość <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> wyliczenia, która wskazuje stan przepływu pracy.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadCompletedContextActivity (Guid scopeId, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadCompletedContextActivity(valuetype System.Guid scopeId, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadCompletedContextActivity (scopeId As Guid, outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadCompletedContextActivity(Guid scopeId, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberSignature Language="F#" Value="abstract member LoadCompletedContextActivity : Guid * System.Workflow.ComponentModel.Activity -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowPersistenceService.LoadCompletedContextActivity (scopeId, outerActivity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeId" Type="System.Guid" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="scopeId"><see cref="T:System.Guid" /> Zakończony zakres.</param>
        <param name="outerActivity"><see cref="T:System.Workflow.ComponentModel.Activity" /> Reprezentuje działanie, które zawiera ukończony zakres.</param>
        <summary>Po zaimplementowaniu w klasie pochodnej program ładuje określony ukończony zakres z powrotem do pamięci.</summary>
        <returns><see cref="T:System.Workflow.ComponentModel.Activity" /> Reprezentuje zakres zakończony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat środowiska uruchomieniowego przepływu <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> pracy używa do implementowania kompensacji. Należy przywrócić identyczną kopię ukończonego zakresu. W tym celu należy przywrócić prawidłowe <xref:System.IO.Stream> dane z reprezentacji zakresu kompletnego w magazynie danych. Następnie należy przekazać ten <xref:System.IO.Stream> element do jednej z przeciążonych <xref:System.Workflow.ComponentModel.Activity.Load%2A> metod w celu wykonania deserializacji zakresu.  
  
 Jeśli usługa trwałości nie może załadować ukończonego zakresu z magazynu danych, należy zgłosić <xref:System.Workflow.Runtime.Hosting.PersistenceException> go przy użyciu odpowiedniego komunikatu.  
  
   
  
## Examples  
 Poniższy przykład ilustruje implementację `LoadCompletedContextActivity` metody. Ten przykład pochodzi z przykładu niestandardowej usługi trwałości z pliku FilePersistenceService.cs. Aby uzyskać więcej informacji, zobacz [niestandardowy przykład usługi trwałości](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadWorkflowInstanceState (instanceId As Guid) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadWorkflowInstanceState(Guid instanceId);" />
      <MemberSignature Language="F#" Value="abstract member LoadWorkflowInstanceState : Guid -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowPersistenceService.LoadWorkflowInstanceState instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId"><see cref="T:System.Guid" /> Główny działania wystąpienia przepływu pracy.</param>
        <summary>Po zaimplementowaniu w klasie pochodnej ładuje określony stan wystąpienia przepływu pracy z powrotem do pamięci.</summary>
        <returns><see cref="T:System.Workflow.ComponentModel.Activity" /> Reprezentuje działanie główne wystąpienia przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy przywrócić identyczną kopię działania. W tym celu należy przywrócić prawidłowy <xref:System.IO.Stream> element z reprezentacji wystąpienia przepływu pracy w magazynie danych, a następnie <xref:System.IO.Stream> przekazać go do jednej z przeciążonych <xref:System.Workflow.ComponentModel.Activity.Load%2A> metod w celu deserializacji stanu wystąpienia przepływu pracy. Jeśli usługa trwałości nie może załadować stanu wystąpienia przepływu pracy z magazynu danych, należy zgłosić <xref:System.Workflow.Runtime.Hosting.PersistenceException> go przy użyciu odpowiedniego komunikatu.  
  
 Aparat środowiska uruchomieniowego przepływu pracy implementuje semantykę blokowania, aby ograniczyć dostęp do stanu wystąpienia przepływu pracy zapisanego w magazynie danych. Dostęp do niego mają usługi trwałości działające w wielu procesach. Semantyka blokowania jest przeznaczona do zapobiegania usługom trwałości uruchomionym w dwóch różnych procesach z jednoczesnego ładowania tego samego wystąpienia przepływu pracy do pamięci. W zależności od typu środowiska, do obsługi którego zaprojektowano usługę trwałości, możesz zdecydować, czy ma być obsługiwana ta funkcja. W przypadku wybrania obsługi semantyki blokowania środowiska uruchomieniowego, a jeśli ten stan wystąpienia przepływu pracy został wcześniej zablokowany przez inny proces, należy zgłosić <xref:System.Workflow.Runtime.WorkflowOwnershipException>. W przeciwnym razie należy zablokować dostęp do stanu wystąpienia przepływu pracy w magazynie danych. Stan wystąpienia przepływu pracy może być odblokowany przez wywołanie <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> lub <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> wywołanie z parametrem Unlock ustawionym na `true`.  
  
   
  
## Examples  
 Poniższy przykład ilustruje implementację `LoadWorkflowInstanceState` metody. Ten przykład pochodzi z przykładu niestandardowej usługi trwałości z pliku FilePersistenceService.cs. Aby uzyskać więcej informacji, zobacz [niestandardowy przykład usługi trwałości](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#266](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#266)]
 [!code-vb[WF_Samples#266](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#266)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreFromDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm (byte[] activityBytes, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm(unsigned int8[] activityBytes, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RestoreFromDefaultSerializedForm (activityBytes As Byte(), outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Workflow::ComponentModel::Activity ^ RestoreFromDefaultSerializedForm(cli::array &lt;System::Byte&gt; ^ activityBytes, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberSignature Language="F#" Value="static member RestoreFromDefaultSerializedForm : byte[] * System.Workflow.ComponentModel.Activity -&gt; System.Workflow.ComponentModel.Activity" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm (activityBytes, outerActivity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityBytes" Type="System.Byte[]" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activityBytes">Serializowana postać <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
        <param name="outerActivity">Zewnętrzny <see cref="T:System.Workflow.ComponentModel.Activity" /> ,<see cref="T:System.Workflow.ComponentModel.Activity" /> zawierający do przywracania.</param>
        <summary><see cref="T:System.Workflow.ComponentModel.Activity" /> Przywraca z serializowanej formy.</summary>
        <returns>Przywrócono <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład ilustruje implementację `RestoreFromDefaultSerializedForm` metody. Ten przykład pochodzi z przykładu niestandardowej usługi trwałości z pliku FilePersistenceService.cs. Aby uzyskać więcej informacji, zobacz [niestandardowy przykład usługi trwałości](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveCompletedContextActivity (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveCompletedContextActivity(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveCompletedContextActivity(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="abstract member SaveCompletedContextActivity : System.Workflow.ComponentModel.Activity -&gt; unit" Usage="workflowPersistenceService.SaveCompletedContextActivity activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity"><see cref="T:System.Workflow.ComponentModel.Activity" /> Reprezentuje zakres zakończony.</param>
        <summary>W przypadku zaimplementowania w klasie pochodnej program zapisuje określony zakończony zakres do magazynu danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat środowiska uruchomieniowego przepływu pracy zapisuje stan ukończonych działań zakresu w celu zaimplementowania kompensacji. Musisz wywołać jedną z przeciążonych <xref:System.Workflow.ComponentModel.Activity.Save%2A> metod do serializacji `activity` <xref:System.IO.Stream>na. <xref:System.IO.Stream> możesz następnie wybrać opcję przetwarzania przed zapisem w magazynie danych. Jednak gdy aparat środowiska uruchomieniowego przepływu pracy <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>wywołuje program, należy przywrócić identyczną kopię działania.  
  
 Aby oznaczyć zakres jako niezbędny w magazynie danych, gdy wystąpienie przepływu pracy zostanie zakończone lub zostało przerwane, musi istnieć możliwość skojarzenia kompletnego zakresu z otaczającym nim wystąpieniem przepływu pracy. W związku z tym należy również zapisać <xref:System.Guid> wystąpienie przepływu pracy, które jest skojarzone z zakończonym zakresem; można to uzyskać <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> z właściwości <xref:System.Workflow.Runtime.WorkflowInstance> skojarzonej z `activity`.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A><xref:System.Guid> Pobiera zakres zakończony jako parametr. W związku z tym należy również zapisać <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> Właściwość skojarzoną `activity`z. Do tej właściwości można odwoływać się <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty> za pomocą `activity`pola.  
  
 W przypadku wdrażania usługi trwałości korzystającej z magazynu trwałego, aby zachować spójność z wewnętrznym stanem aparatu środowiska uruchomieniowego przepływu pracy, należy wziąć udział w przetwarzaniu wsadowym transakcji przepływu pracy w celu odroczenia rzeczywistego zapisu do magazynu trwałego do punkt zatwierdzania przepływu pracy. Aby wziąć udział w partiach, Dodaj element roboczy do <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> właściwości, która reprezentuje oczekujące zmiany w bazie danych, i <xref:System.Workflow.Runtime.IPendingWork> Zaimplementuj interfejs w usłudze trwałości.  
  
 Jeśli nie można zapisać ukończonego zakresu w magazynie danych, należy zgłosić <xref:System.Workflow.Runtime.Hosting.PersistenceException> komunikat o błędzie.  
  
   
  
## Examples  
 Poniższy przykład ilustruje implementację `SaveCompletedContextActivity` metody. Ten przykład pochodzi z przykładu niestandardowej usługi trwałości z pliku FilePersistenceService.cs. Aby uzyskać więcej informacji, zobacz [niestandardowy przykład usługi trwałości](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#268](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#268)]
 [!code-vb[WF_Samples#268](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#268)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity, bool unlock);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity, bool unlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub SaveWorkflowInstanceState (rootActivity As Activity, unlock As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity, bool unlock);" />
      <MemberSignature Language="F#" Value="abstract member SaveWorkflowInstanceState : System.Workflow.ComponentModel.Activity * bool -&gt; unit" Usage="workflowPersistenceService.SaveWorkflowInstanceState (rootActivity, unlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="unlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rootActivity">Działanie główne wystąpienia przepływu pracy.</param>
        <param name="unlock"><see langword="true" />Jeśli wystąpienie przepływu pracy nie powinno być zablokowane; <see langword="false" /> Jeśli wystąpienie przepływu pracy powinno być zablokowane.</param>
        <summary>Po zaimplementowaniu w klasie pochodnej program zapisuje stan wystąpienia przepływu pracy w magazynie danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy wywołać jedną z przeciążonych <xref:System.Workflow.ComponentModel.Activity.Save%2A> metod do serializacji `rootActivity` do <xref:System.IO.Stream>. Następnie możesz wybrać, <xref:System.IO.Stream> aby dodatkowo przetworzyć je przed zapisaniem w magazynie danych. Jednak gdy aparat środowiska uruchomieniowego przepływu pracy <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>wywołuje program, należy przywrócić identyczną kopię działania głównego. Jeśli nie można zapisać stanu wystąpienia przepływu pracy w magazynie danych, należy zgłosić go <xref:System.Workflow.Runtime.Hosting.PersistenceException> przy użyciu odpowiedniego komunikatu o błędzie.  
  
 Aparat środowiska uruchomieniowego przepływu pracy zapewnia semantykę blokowania, aby ograniczyć dostęp do stanu wystąpienia przepływu pracy zapisanego w magazynie danych. Dostęp do niego można uzyskać przez usługi trwałości działające na wielu hostach i wskazujących na ten sam magazyn danych. Semantyka blokowania została zaprojektowana tak, aby zapobiegać usługom trwałości, które działają w dwóch różnych środowiskach uruchomieniowych przepływu pracy do jednoczesnego ładowania tego samego wystąpienia przepływu pracy do pamięci. W zależności od typu środowiska, do obsługi którego jest zaprojektowana usługa trwałości, możesz wybrać, czy ta funkcja ma być obsługiwana. W przypadku wybrania obsługi semantyki blokowania środowiska uruchomieniowego, jeśli usługa trwałości podejmie próbę zapisania stanu wystąpienia przepływu pracy, który został wcześniej zablokowany przez inną usługę trwałości, należy zgłosić <xref:System.Workflow.Runtime.WorkflowOwnershipException>. Jeśli `unlock` jest`true`, należy odblokować dostęp do stanu wystąpienia przepływu pracy po jego zapisaniu.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A><xref:System.Guid> przyjmuje wystąpienie przepływu pracy jako parametr. W związku z tym należy go <xref:System.Guid>zapisać. Można go również użyć <xref:System.Guid> do skojarzenia wystąpienia przepływu pracy z zapisanymi stanami jego ukończonych zakresów. Należy to zrobić, ponieważ należy mieć możliwość oznaczania tych zakończonych zakresów jako niepotrzebnych po zakończeniu działania wystąpienia przepływu pracy.  
  
 Aparat środowiska uruchomieniowego przepływu <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> pracy wywołuje czas końcowy, gdy wystąpienie przepływu pracy zostanie zakończone lub zostało zakończone. W związku z <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> tym, jeśli <xref:System.Workflow.Runtime.WorkflowStatus.Completed> jest <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>równe lub, można bezpiecznie usunąć wystąpienie przepływu pracy i wszystkie skojarzone z nim zakresy ukończone z magazynu danych. Alternatywnie można subskrybować zdarzenia lub <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> , aby określić, kiedy bezpiecznie usunąć rekordy skojarzone z wystąpieniem przepływu pracy. Bez względu na to, czy rekordy z magazynu danych zostały usunięte, zależy od implementacji.  
  
 W przypadku zaimplementowania usługi trwałości korzystającej z magazynu trwałego, aby zachować spójność z wewnętrznym stanem aparatu środowiska uruchomieniowego przepływu pracy, należy wziąć udział w przetwarzaniu wsadowym transakcji przepływu pracy w celu odroczenia rzeczywistego zapisu do magazynu trwałego do punkt zatwierdzania przepływu pracy. Aby wziąć udział w partiach, Dodaj element roboczy, który reprezentuje oczekujące zmiany do magazynu <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> trwałego, i <xref:System.Workflow.Runtime.IPendingWork> Zaimplementuj interfejs w usłudze trwałości.  
  
   
  
## Examples  
 Poniższy przykład ilustruje implementację `SaveWorkflowInstanceState` metody. Ten przykład pochodzi z przykładu niestandardowej usługi trwałości z pliku FilePersistenceService.cs. Aby uzyskać więcej informacji, zobacz [niestandardowy przykład usługi trwałości](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#264](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#264)]
 [!code-vb[WF_Samples#264](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#264)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnloadOnIdle">
      <MemberSignature Language="C#" Value="protected internal abstract bool UnloadOnIdle (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool UnloadOnIdle(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract bool UnloadOnIdle(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="abstract member UnloadOnIdle : System.Workflow.ComponentModel.Activity -&gt; bool" Usage="workflowPersistenceService.UnloadOnIdle activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity"><see cref="T:System.Workflow.ComponentModel.Activity" /> Reprezentuje zakres zakończony.</param>
        <summary>Określa, czy przepływ pracy powinien zostać zwolniony, gdy jest bezczynny.</summary>
        <returns>Jeśli <see langword="true" />aparat środowiska uruchomieniowego przepływu pracy zwalnia określony przepływ pracy, gdy stanie się bezczynna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład ilustruje implementację `UnloadOnIdle` metody. Ten przykład pochodzi z przykładu niestandardowej usługi trwałości z pliku FilePersistenceService.cs. Aby uzyskać więcej informacji, zobacz [niestandardowy przykład usługi trwałości](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#270](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#270)]
 [!code-vb[WF_Samples#270](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#270)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnlockWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void UnlockWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void UnlockWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub UnlockWorkflowInstanceState (rootActivity As Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void UnlockWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="abstract member UnlockWorkflowInstanceState : System.Workflow.ComponentModel.Activity -&gt; unit" Usage="workflowPersistenceService.UnlockWorkflowInstanceState rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">Działanie główne wystąpienia przepływu pracy.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, odblokowuje stan wystąpienia przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest abstrakcyjna, dlatego nie zawiera domyślnej implementacji blokowania i odblokowywania.  
  
 W przypadku implementowania niestandardowej usługi trwałości, jeśli chcesz zaimplementować schemat blokowania, musisz zastąpić tę metodę i zapewnić mechanizm blokowania odblokowywania w <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> metodzie opartej na wartości parametru unlock.  
  
   
  
## Examples  
 Poniższy przykład ilustruje implementację `UnlockWorkflowInstanceState` metody. Ten przykład pochodzi z przykładu niestandardowej usługi trwałości z pliku FilePersistenceService.cs. Aby uzyskać więcej informacji, zobacz [niestandardowy przykład usługi trwałości](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#267](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#267)]
 [!code-vb[WF_Samples#267](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#267)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
