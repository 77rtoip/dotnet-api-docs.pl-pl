<Type Name="ComponentGuaranteesAttribute" FullName="System.Runtime.Versioning.ComponentGuaranteesAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="55e963de01e1e5d16d3a6dc091a2bb42dffe88b7" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69265699" /></Metadata><TypeSignature Language="C#" Value="public sealed class ComponentGuaranteesAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComponentGuaranteesAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ComponentGuaranteesAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComponentGuaranteesAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ComponentGuaranteesAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Constructor | System.AttributeTargets.Delegate | System.AttributeTargets.Enum | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Method | System.AttributeTargets.Module | System.AttributeTargets.Property | System.AttributeTargets.Struct, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje gwarancję zgodności składnika, typu lub składowej typu, która może obejmować wiele wersji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Program <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> jest używany przez deweloperów składników i bibliotek klas, aby wskazać poziom zgodności, który mogą oczekiwać od odbiorców ich bibliotek w wielu wersjach. Wskazuje poziom zagwarantowania, że przyszła wersja biblioteki lub składnika nie spowoduje przerwania istniejącego klienta. Klienci mogą następnie wykorzystać <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> jako pomoc w projektowaniu własnych interfejsów, aby zapewnić stabilność w różnych wersjach.  
  
> [!NOTE]
>  Środowisko uruchomieniowe języka wspólnego (CLR) nie używa tego atrybutu w jakikolwiek sposób. Jego wartość polega na formalnym udokumentowaniu intencji autora składnika. Narzędzia czasu kompilacji mogą również używać tych deklaracji do wykrywania błędów czasu kompilacji, które w przeciwnym razie spowodują przerwanie zadeklarowanej gwarancji.  
  
## <a name="levels-of-compatibility"></a>Poziomy zgodności  
 Program obsługuje następujące poziomy zgodności, które są reprezentowane przez elementy członkowskie <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> wyliczenia: <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>  
  
-   Brak zgodności wersji z wersją (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType>). Klient może oczekiwać, że przyszłe wersje spowodują przerwanie istniejącego klienta. Aby uzyskać więcej informacji, zobacz sekcję [Brak zgodności](#None) w dalszej części tego tematu.  
  
-   Zgodność między wersjami (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType>). Składnik został przetestowany do pracy, gdy więcej niż jedna wersja zestawu jest załadowana w tej samej domenie aplikacji. Ogólnie rzecz biorąc, przyszłe wersje mogą powodować przerwanie zgodności. Jednak po wprowadzeniu zmian, stara wersja nie jest modyfikowana, ale istnieje obok nowej wersji. Wykonywanie równoczesne jest oczekiwanym sposobem, aby istniejące klienci działały po wprowadzeniu zmian. Aby uzyskać więcej informacji, zobacz sekcję [zgodność Side-by-Side](#SideBySide) w dalszej części tego tematu.  
  
-   Stabilna zgodność wersji z wersją (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType>). Przyszłe wersje nie powinny powodować przerw w działaniu klienta, a wykonywanie równoczesne nie powinno być koniecznie. Jeśli jednak klient zostanie przypadkowo przerwany, może być możliwe użycie wykonywania równoczesnego w celu rozwiązania problemu. Aby uzyskać więcej informacji, zobacz sekcję o [stabilnej zgodności](#Standard) .  
  
-   Zgodność wersji z wersjami programu Exchange (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType>). W celu zapewnienia, że przyszłe wersje nie spowodują przerwania klienta programu, należy zadbać o nadzwyczajne. Klient powinien używać tylko tych typów w sygnaturze interfejsów, które są używane do komunikacji z innymi zestawami, które są wdrażane niezależnie od siebie. Tylko jedna wersja tych typów powinna znajdować się w danej domenie aplikacji, co oznacza, że w przypadku przerwania klienta Wykonywanie równoczesne nie może rozwiązać problemu ze zgodnością. Aby uzyskać więcej informacji, zobacz sekcję [zgodność typów programu Exchange](#Exchange) .  
  
 W poniższych sekcjach szczegółowo omówiono każdy poziom gwarancji.  
  
<a name="None"></a>   
### <a name="no-compatibility"></a>Brak zgodności  
 Oznaczenie składnika jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType> wskazuje, że dostawca nie gwarantuje zgodności. Klienci powinni unikać wykonywania jakichkolwiek zależności w interfejsie uwidocznionym. Ten poziom zgodności jest przydatny w przypadku typów, które są eksperymentalne lub publicznie udostępniane, ale są przeznaczone tylko dla składników, które są zawsze aktualizowane w tym samym czasie. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>jawnie wskazuje, że ten składnik nie powinien być używany przez składniki zewnętrzne.  
  
<a name="SideBySide"></a>   
### <a name="side-by-side-compatibility"></a>Zgodność Side-by-Side  
 Oznaczenie składnika jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType> wskazuje, że składnik został przetestowany do pracy, gdy więcej niż jedna wersja zestawu jest załadowana do tej samej domeny aplikacji. Istotne zmiany są dozwolone, o ile są wprowadzane do zestawu, który ma większy numer wersji. Składniki, które są powiązane ze starszą wersją zestawu, powinny nadal być powiązane ze starszą wersją, a inne składniki można powiązać z nową wersją. Można również zaktualizować składnik, który jest zadeklarowany <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide> jako przez szkodliwe modyfikacje starej wersji.  
  
<a name="Standard"></a>   
### <a name="stable-compatibility"></a>Stabilna zgodność  
 Oznaczanie typu jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType> wskazuje, że typ powinien pozostać stabilny w różnych wersjach. Jednak może być również możliwe, aby w tej samej domenie aplikacji istniała równoległe wersje typu Side-by-side.  
  
 Stabilne typy obsługują wysoki binarny pasek zgodności. Z tego powodu dostawcy powinni unikać wprowadzania istotnych zmian w stabilnych typach. Dopuszczalne są następujące rodzaje zmian:  
  
-   Dodawanie prywatnych pól wystąpień do lub usuwanie pól z typu, o ile nie spowoduje to przerwania tego formatu serializacji.  
  
-   Zmiana typu niemożliwego do serializacji na typ możliwy do serializacji. Nie można jednak zmienić typu możliwego do serializacji na typ, który nie jest możliwy do serializacji.  
  
-   Generowanie nowych, bardziej pochodnych wyjątków z metody.  
  
-   Poprawa wydajności metody.  
  
-   Zmiana zakresu wartości zwracanych, o ile zmiana nie wpływa negatywnie na większość klientów.  
  
-   Naprawianie poważnych usterek, jeśli uzasadnienie biznesowe jest wysokie i liczba klientów, których to dotyczy, jest niska.  
  
 Ponieważ nie ma potrzeby przerywania istniejących klientów przez nowe wersje stabilnych składników, w domenie aplikacji jest wymagana tylko jedna wersja stabilnego składnika. Nie jest to jednak wymagane, ponieważ stałe typy nie są używane jako dobrze znane typy wymiany, do których wszystkie składniki zgadzają się. W związku z tym, jeśli nowa wersja stabilnego składnika powoduje przypadkowe uszkodzenie części składnika, a inne składniki potrzebują nowej wersji, może być możliwe rozwiązanie problemu przez załadowanie zarówno starego, jak i nowego składnika.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>zapewnia silną gwarancję zgodności wersji <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>niż. Jest to typowa wartość domyślna dla składników wieloskładnikowych.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>program może być połączony <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide>z, co oznacza, że składnik nie przerywa zgodności, ale jest testowany do pracy, gdy więcej niż jedna wersja zostanie załadowana w danej domenie aplikacji.  
  
 Gdy typ lub metoda jest oznaczona jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>, można ją uaktualnić do. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> Nie można jednak go zmienić na <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>starszą wersję.  
  
<a name="Exchange"></a>   
### <a name="exchange-type-compatibility"></a>Zgodność typów programu Exchange  
 Oznaczanie typu jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType> zapewnia silną gwarancję zgodności wersji <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>niż i powinno być stosowane do najbardziej stabilnych wszystkich typów. Te typy mają być używane do wymiany między niezależnie skompilowanymi składnikami we wszystkich granicach składników w obu momentach (dowolna wersja środowiska CLR lub dowolnej wersji składnika lub aplikacji) oraz miejsce (między różnymi procesami środowiska CLR w jednym procesie, Domena między aplikacjami w jednym środowisku CLR). W przypadku wprowadzenia zmiany w typie programu Exchange nie można rozwiązać problemu przez załadowanie wielu wersji typu.  
  
 Typy wymiany należy zmienić tylko wtedy, gdy problem jest bardzo znaczący (na przykład poważny problem z zabezpieczeniami) lub prawdopodobieństwo zerwania jest bardzo niskie (to oznacza, że zachowanie zostało już zerwane w losowym stopniu, w którym kod nie mógł uzyskać zależności od). Można wprowadzać następujące rodzaje zmian w typie wymiany:  
  
-   Dodaj dziedziczenie nowych definicji interfejsów.  
  
-   Dodaj nowe metody prywatne, które implementują metody nowo dziedziczonych definicji interfejsu.  
  
-   Dodaj nowe pola statyczne.  
  
-   Dodaj nowe metody statyczne.  
  
-   Dodaj nowe niewirtualne metody wystąpień.  
  
 Poniższe zmiany są uznawane za istotne i nie są dozwolone dla typów pierwotnych:  
  
-   Zmienianie formatów serializacji. Wymagana jest Serializacja odporna na wersje.  
  
-   Dodawanie lub usuwanie prywatnych pól wystąpień. To ryzyko zmienia format serializacji typu i kodu klienta, który używa odbicia.  
  
-   Zmiana serializacji typu. Nie można serializować typu niemożliwego do serializacji i na odwrót.  
  
-   Zgłaszanie różnych wyjątków z metody.  
  
-   Zmiana zakresu wartości zwracanych przez metodę, chyba że definicja elementu członkowskiego podnosi tę możliwość i jasno wskazuje, jak klienci powinni obsługiwać nieznane wartości.  
  
-   Naprawianie większości usterek. Odbiorcy typu będą opierać się na istniejącym zachowaniu.  
  
 Gdy składnik, typ lub element członkowski są oznaczone <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> gwarancją, nie można go zmienić <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> na ani <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>.  
  
 Zazwyczaj typy wymiany to typy podstawowe (takie jak <xref:System.Int32> i <xref:System.String> w .NET Framework) i interfejsy (takie jak <xref:System.Collections.Generic.IList%601>, <xref:System.Collections.Generic.IEnumerable%601>i <xref:System.IComparable%601>), które są często używane w interfejsach publicznych.  
  
 Typy wymiany mogą publicznie ujawniać tylko inne typy, które są również <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> oznaczone jako zgodne. Ponadto typy wymiany nie mogą zależeć od zachowania interfejsów API systemu Windows, które są podatne na zmianę.  
  
## <a name="component-guarantees-a-summary"></a>Gwarancje składników: Podsumowanie  
 Poniższa tabela zawiera informacje o tym, jak charakterystyki i użycie składnika wpływają na jego gwarancję zgodności.  
  
|Charakterystyki składników|Program Exchange|Stable|Side-by-Side|Brak|  
|-------------------------------|--------------|------------|--------------------|----------|  
|Może być używany w interfejsach między składnikami niezależnie od wersji.|T|N|N|N|  
|Może być używany (prywatnie) przez zestaw, który niezależnie od wersji.|T|T|T|N|  
|Może mieć wiele wersji w jednej domenie aplikacji.|N|T|T|T|  
|Może wprowadzać istotne zmiany|N|N|T|T|  
|Przetestowano, aby można było załadować wiele różnych wersji zestawu.|N|N|T|N|  
|Może wprowadzać istotne zmiany.|N|N|N|T|  
|Może zapewnić bardzo bezpieczne niekrytyczne zmiany obsługi.|T|T|T|T|  
  
## <a name="applying-the-attribute"></a>Stosowanie atrybutu  
 Można zastosować <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> do zestawu, typu lub elementu członkowskiego typu. Jego aplikacja jest hierarchiczna. Oznacza to, że domyślnie gwarancja zdefiniowana przez <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> właściwość atrybutu na poziomie zestawu definiuje gwarancję wszystkich typów w zestawie i wszystkich elementów członkowskich w tych typach. Podobnie, jeśli gwarancja jest stosowana do typu, domyślnie ma również zastosowanie do każdego elementu członkowskiego typu.  
  
 To dziedziczone gwarancje może zostać zastąpione przez <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> zastosowanie do poszczególnych typów i elementów członkowskich typu. Jednak gwarancje, które zastępują domyślne, mogą obniżyć tylko gwarancję; nie mogą ich wzmocnić. Na przykład jeśli zestaw jest oznaczony <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> gwarancją, jego typy i elementy członkowskie nie mają gwarancji zgodności i jakakolwiek inna gwarancja stosowana do typów lub członków zestawu jest ignorowana.  
  
## <a name="testing-the-guarantee"></a>Testowanie gwarancji  
 Właściwość zwraca element członkowski <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> wyliczenia, <xref:System.FlagsAttribute> który jest oznaczony atrybutem. <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> Oznacza to, że należy przetestować dla flagi, która Cię interesuje, maskowanie potencjalnie nieznanych flag. Na przykład poniższy przykład sprawdza, czy typ jest oznaczony jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>.  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#1)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#1)]  
  
 Poniższy przykład sprawdza, czy typ jest oznaczony jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> lub. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#2)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#2)]  
  
 Poniższe przykładowe testy wither typ jest oznaczony jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> (to nie <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> jest ani ani <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>).  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#3)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Versioning.ComponentGuaranteesOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComponentGuaranteesAttribute (System.Runtime.Versioning.ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Versioning.ComponentGuaranteesOptions guarantees) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (guarantees As ComponentGuaranteesOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComponentGuaranteesAttribute(System::Runtime::Versioning::ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Versioning.ComponentGuaranteesAttribute : System.Runtime.Versioning.ComponentGuaranteesOptions -&gt; System.Runtime.Versioning.ComponentGuaranteesAttribute" Usage="new System.Runtime.Versioning.ComponentGuaranteesAttribute guarantees" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="guarantees" Type="System.Runtime.Versioning.ComponentGuaranteesOptions" />
      </Parameters>
      <Docs>
        <param name="guarantees">Jedna z wartości wyliczenia, która określa poziom zgodności, który jest gwarantowany dla wielu wersji.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> klasy z wartością wskazującą bibliotekę, typ lub gwarantowany poziom zgodności w wielu wersjach.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu wystąpienia `guarantees` <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> klasy wartość parametru jest przypisywana do właściwości. <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Guarantees">
      <MemberSignature Language="C#" Value="public System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Guarantees As ComponentGuaranteesOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Versioning::ComponentGuaranteesOptions Guarantees { System::Runtime::Versioning::ComponentGuaranteesOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Guarantees : System.Runtime.Versioning.ComponentGuaranteesOptions" Usage="System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Versioning.ComponentGuaranteesOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która wskazuje gwarantowany poziom zgodności biblioteki, typu lub składowej typu, która obejmuje wiele wersji.</summary>
        <value>Jedna z wartości wyliczenia, która określa poziom zgodności, który jest gwarantowany dla wielu wersji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> właściwości odpowiada `guarantees` parametrowi <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A> konstruktora.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
