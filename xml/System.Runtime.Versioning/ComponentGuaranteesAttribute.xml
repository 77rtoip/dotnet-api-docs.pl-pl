<Type Name="ComponentGuaranteesAttribute" FullName="System.Runtime.Versioning.ComponentGuaranteesAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="419d48be0fd64c8d209fc03bcc2d4676c2742593" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30567544" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ComponentGuaranteesAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComponentGuaranteesAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ComponentGuaranteesAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComponentGuaranteesAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje gwarancji zgodności tego składnika, typ lub element członkowski typu, który może obejmować wiele wersji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> Jest używana przez deweloperów składników oraz bibliotek klas do wskazuje poziom zgodności, który konsumentów ich bibliotek można spodziewać się w różnych wersjach. Wskazuje poziom gwarancji, że przyszłych wersji biblioteki lub składnik nie będę powodować utraty istniejącego klienta. Klienci mogą następnie używać <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> jako pomoc przy projektowaniu własnych interfejsów w celu zapewnienia trwałości między wersjami.  
  
> [!NOTE]
>  Środowisko uruchomieniowe języka wspólnego (CLR) nie używa tego atrybutu w dowolny sposób. Wartość znajduje się w formalnie dokumentowanie celem autora składnika. Narzędzia kompilacji służy także do wykrywania błędów kompilacji, które w przeciwnym razie spowoduje przerwanie zadeklarowane Gwarancji deklaracji.  
  
## <a name="levels-of-compatibility"></a>Stopień zgodności  
 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> Obsługuje następujące poziomy zgodności, które są reprezentowane przez członków <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> wyliczenie:  
  
-   Nie zgodności wersji do wersji (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType>). Klienta można oczekiwać, że w przyszłych wersjach spowoduje przerwanie istniejącego klienta. Aby uzyskać więcej informacji, zobacz [zgodności nie](#None) później w tym temacie.  
  
-   Zgodność wersji do wersji Side-by-side (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType>). Składnik był testowany do pracy po załadowaniu więcej niż jedną wersję zestawu w tej samej domenie aplikacji. Ogólnie rzecz biorąc mogą być dzielone przyszłych wersji zgodności. Jednak podczas wprowadzania zmian podziału, stara wersja nie jest modyfikowany, ale istnieje równolegle z nowej wersji. Wykonanie Side-by-side jest oczekiwany sposób istniejących klientów działa, gdy zostaną wprowadzone zmiany podziału. Aby uzyskać więcej informacji, zobacz [zgodności Side-by-Side](#SideBySide) później w tym temacie.  
  
-   Stabilna wersji do wersji zgodności (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType>). Przyszłych wersji nie powinna zostać podzielona na kliencie i wykonywania side-by-side powinny być niepotrzebne. Jednak jeśli klient zostanie przypadkowo przerwane, może być możliwe wykonanie side-by-side Aby rozwiązać ten problem. Aby uzyskać więcej informacji, zobacz [stabilna zgodności](#Standard) sekcji.  
  
-   Zgodność wersji do wersji Exchange (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType>). Nadzwyczajne są dokładnie dokumentowane upewnij się, że kolejne wersje nie będę powodować utraty klienta. Klienta należy używać tylko tych typów w podpisie interfejsów, które są używane do komunikacji z innych zestawów, które zostały wdrożone, niezależnie od siebie. Tylko jedna wersja te typy powinien znajdować się w domenie danej aplikacji, co oznacza, że klient dzieli, wykonanie side-by-side nie może rozwiązać problem ze zgodnością. Aby uzyskać więcej informacji, zobacz [zgodności typu Exchange](#Exchange) sekcji.  
  
 W poniższych sekcjach omówiono każdy poziom gwarancji większej liczby szczegółów.  
  
<a name="None"></a>   
### <a name="no-compatibility"></a>Nie zgodności  
 Oznaczanie jako składnik <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType> wskazuje, że dostawca sprawia, że żadnych gwarancji dotyczących zgodności. Klientów należy unikać wykonywania wszelkie zależności na interfejsów. Ten poziom zgodności jest przydatne w przypadku typów, które są eksperymentalne lub które są udostępniane publicznie, ale są przeznaczone tylko dla składników, które zawsze są aktualizowane w tym samym czasie. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> jawnie wskazuje, że ten składnik nie powinna być używana przez składników zewnętrznych.  
  
<a name="SideBySide"></a>   
### <a name="side-by-side-compatibility"></a>Zgodność Side-by-Side  
 Oznaczanie jako składnik <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType> wskazuje, że składnik został przetestowany pod pracę, gdy więcej niż jedną wersję zestawu jest ładowany do tej samej domenie aplikacji. Fundamentalne zmiany mogą tak długo, jak zostały wprowadzone do zestawu, który ma numer wersji większy. Składniki, które są powiązane z starą wersję zestawu powinny obowiązywała starej wersji i inne składniki można powiązać z nowej wersji. Istnieje również możliwość zaktualizować składnik, który został zadeklarowany jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide> jest generowany, modyfikując starej wersji.  
  
<a name="Standard"></a>   
### <a name="stable-compatibility"></a>Stabilna zgodności  
 Oznaczenie typu jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType> wskazuje, że typ powinien być stabilny między wersjami. Jednak może również być możliwe w przypadku wersji side-by-side stabilna typu istnieje w tej samej domenie aplikacji.  
  
 Typy stabilna Obsługa pasek wysokiej zgodność binarną. W związku z tym dostawców należy unikać wprowadzania zmian podziału stabilna typów. Dopuszczalne są następujące rodzaje zmian:  
  
-   Dodawanie pól wystąpień prywatnych do lub usuwanie pola z typem, tak długo, jak to nie spowodować przerwanie format serializacji.  
  
-   Zmiana typu nie można serializować typ możliwy do serializacji. (Jednak serializacji nie można zmienić typu do typu nie można serializować.)  
  
-   Zgłaszanie nowych, bardziej pochodnego wyjątków z metody.  
  
-   Zwiększanie wydajności metody.  
  
-   Zmiana zakresu wartości zwrotnych, tak długo, jak zmiana nie wpływa na większości klientów.  
  
-   Naprawianie poważnych usterek, jeśli biznesowego wyjaśnienia jest wysoki i niski liczba niekorzystnie klienci.  
  
 Ponieważ nowe wersje stabilna składników nie można przerwać istniejących klientów, zwykle tylko jedna wersja składnika stabilna jest potrzebne w domenie aplikacji. Jednak to nie jest wymagane, ponieważ stabilna typy nie są używane jako exchange dobrze znane typy, które uzgodnić wszystkie składniki. W związku z tym jeśli nowa wersja składnika stabilna przypadkowo uszkodzić niektórych składników i inne składniki potrzebne nowej wersji, być może rozwiązać problem ładowania zarówno stary i nowy składnik.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> zapewnia gwarancję silniejszych zgodność wersji niż <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>. Jest domyślny typowe dla wielu wersji składników.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> można łączyć z <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide>, które stwierdza, że składnik nie będę powodować utraty zgodność, ale został sprawdzony pod kątem pracy po załadowaniu więcej niż jedną wersję w domenie danej aplikacji.  
  
 Po typie lub metoda jest oznaczona jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>, może zostać uaktualnione do <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>. Jednak nie można obniżyć do <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>.  
  
<a name="Exchange"></a>   
### <a name="exchange-type-compatibility"></a>Zgodność typu programu Exchange  
 Oznaczenie typu jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType> zapewnia gwarancję silniejszych zgodność wersji niż <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>i powinny być stosowane do najbardziej stabilna wszystkich typów. Te typy są przeznaczone do zastosowania w przypadku wymiany między niezależnie wbudowanych składników bariery wszystkich składników w czasie zarówno (dowolna wersja środowiska CLR) lub w dowolnej wersji składnika lub aplikacji i miejsca (międzyprocesowa, cross-CLR w jednym procesie domena i aplikacji w środowisku CLR co). Jeśli typ programu exchange jest istotne zmiany, nie można rozwiązać ten problem, podczas ładowania wiele wersji tego typu.  
  
 Typy Exchange należy zmienić tylko wtedy, gdy problem jest bardzo poważne (takich jak poważny problem) lub prawdopodobieństwo uszkodzenie jest bardzo niskim (to znaczy, jeśli zachowanie zostało już przerwane w sposób losowy kod może nie powrotne miały zależności na). Możesz wprowadzić następujące rodzaje zmian do typu programu exchange:  
  
-   Dodaj dziedziczenia nowych definicji interfejsu.  
  
-   Dodawanie nowych metod prywatnych, które implementują metody definicje nowo dziedziczony interfejs.  
  
-   Dodaj nowe pola statycznego.  
  
-   Dodawanie nowych metod statycznych.  
  
-   Dodawanie nowych metod innych niż wirtualnego wystąpienia.  
  
 Poniżej są uznawane za istotne zmiany i nie są dozwolone w przypadku pierwotnych typów:  
  
-   Zmienianie formatów serializacji. Wymagany jest serializacji z tolerancją dla wersji.  
  
-   Dodawanie lub usuwanie pól wystąpień prywatnych. To zagrożenie, zmieniając format serializacji typu i fundamentalne kodu klienta, który używa odbicia.  
  
-   Zmiana uszeregowieniem typu. Nie można serializować typu nie mogą być składane serializacji i na odwrót.  
  
-   Wyrzucanie wyjątków różnych z metody.  
  
-   Zmiana zakresu wartości zwracanych metody, chyba że definicji elementu członkowskiego zgłasza tej możliwości i wyraźnie wskazuje sposób obsługi klientów nieznany wartości.  
  
-   Naprawianie większość błędów. Konsumenci typu będzie zależeć od istniejących zachowanie.  
  
 Po składnika, typ lub element członkowski jest oznaczony atrybutem <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> zagwarantować, nie można zmienić jednej <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> lub <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>.  
  
 Zazwyczaj typy programu exchange są typami podstawowymi (takich jak <xref:System.Int32> i <xref:System.String> w programie .NET Framework) i interfejsy (takich jak <xref:System.Collections.Generic.IList%601>, <xref:System.Collections.Generic.IEnumerable%601>, i <xref:System.IComparable%601>) często są używane w publicznych interfejsach.  
  
 Typy Exchange publicznie może narazić tylko innych typów, które także są oznaczone ikoną z <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> zgodności. Ponadto exchange typów nie może zależeć od zachowania interfejsów API systemu Windows, które są podatne na zmiany.  
  
## <a name="component-guarantees-a-summary"></a>Gwarancje składnika: Podsumowanie  
 W poniższej tabeli przedstawiono charakterystyki i użycie składnika wpływ na zabezpieczenia zgodności.  
  
|Właściwości składnika|Program Exchange|Stały|Side-by-Side|Brak|  
|-------------------------------|--------------|------------|--------------------|----------|  
|Mogą być używane w interfejsach między składnikami tej wersji, niezależnie od siebie.|T|N|N|N|  
|Mogą być używane (prywatnie) przez zestaw tej wersji niezależnie.|T|T|T|N|  
|Może mieć wiele wersji w domenie pojedynczej aplikacji.|N|T|T|T|  
|Można wprowadzić przełomowe zmiany|N|N|T|T|  
|Należy przetestować, aby upewnić się, że wiele wersji zestawu, które mogą być ładowane ze sobą.|N|N|T|N|  
|Można wprowadzić przełomowe zmiany w miejscu.|N|N|N|T|  
|Może być bardzo bezpieczne nierozdzielające obsługi zmian w miejscu.|T|T|T|T|  
  
## <a name="applying-the-attribute"></a>Stosowanie atrybutu  
 Możesz zastosować <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> do zestawu, typu lub elementu członkowskiego typu. Hierarchiczna jest jej stosowania. Oznacza to, domyślnie gwarancji zdefiniowane przez <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> właściwości atrybutu na poziomie zestawu definiuje gwarancji dla wszystkich typów w zestawie i wszyscy członkowie w tych typach. Podobnie jeśli gwarancji zostanie zastosowana do typu, domyślnie ma również zastosowanie do każdego elementu członkowskiego typu.  
  
 Dziedziczony gwarancji może zostać przesłonięta przez zastosowanie <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> poszczególne typy i elementy członkowskie typu. Jednak gwarancji, które zastępują domyślne tylko może obniżyć poziom gwarancji. Nie można ich wzmocnienie. Na przykład, jeśli zestaw jest oznaczony atrybutem <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> zagwarantować jego typów i członków nie ma gwarancji, zgodności i innych gwarancji, który jest stosowany do typów albo elementów członkowskich w zestawie jest ignorowana.  
  
## <a name="testing-the-guarantee"></a>Testowanie gwarancji  
 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> Właściwość zwraca element członkowski <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> wyliczenia, który jest oznaczony atrybutem <xref:System.FlagsAttribute> atrybutu. Oznacza to, że należy przetestować flagi, które są zainteresowani przez maskowania nieobecności flagi potencjalnie nieznany. Na przykład poniższy przykład sprawdza, czy typ jest oznaczony jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>.  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#1)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#1)]  
  
 Poniższy przykład sprawdza, czy typ jest oznaczony jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> lub <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>.  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#2)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#2)]  
  
 Poniższy przykład testy Określa typ jest oznaczony jako <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> (oznacza to, że żadna <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> ani <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>).  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#3)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Versioning.ComponentGuaranteesOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComponentGuaranteesAttribute (System.Runtime.Versioning.ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Versioning.ComponentGuaranteesOptions guarantees) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (guarantees As ComponentGuaranteesOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComponentGuaranteesAttribute(System::Runtime::Versioning::ComponentGuaranteesOptions guarantees);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="guarantees" Type="System.Runtime.Versioning.ComponentGuaranteesOptions" />
      </Parameters>
      <Docs>
        <param name="guarantees">Jedna z wartości wyliczenia, które określa poziom zgodności, który jest gwarantowana w różnych wersjach.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> klasy z wartością, która wskazuje biblioteki, typu lub elementu członkowskiego gwarancji poziom zgodności w różnych wersjach.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> tworzenia wystąpienia klasy wartości `guarantees` parametru jest przypisany do <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Guarantees">
      <MemberSignature Language="C#" Value="public System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Guarantees As ComponentGuaranteesOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Versioning::ComponentGuaranteesOptions Guarantees { System::Runtime::Versioning::ComponentGuaranteesOptions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Versioning.ComponentGuaranteesOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą gwarantowanym poziomem zgodności biblioteki, typu lub elementu członkowskiego typu obejmującej wiele wersji.</summary>
        <value>Jedna z wartości wyliczenia, które określa poziom zgodności, który jest gwarantowana w różnych wersjach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> właściwość odpowiada `guarantees` parametr <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A> konstruktora.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>